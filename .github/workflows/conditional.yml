name: Conditional workflow
on: [push, workflow_dispatch]
jobs:
  Test_code:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: setup environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' 
      - name: cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ hashFiles('requirements.txt') }}
      - name: python venv
        run: |
          python -m venv venvconditional
          source venvconditional/bin/activate
      - name: install dependencies
        run: pip install -r requirements.txt
      - name: test code
        id: test_code
        run: |
          python3 test_app.py > test_result.txt 2>&1
          cat test_result.txt  
      # create artifact
      - name: store the output
        if: failure() && steps.test_code.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: test_result
          path: test_result.txt

  Build_App:
    needs: Test_code
    env:
      NAME: Emmanuel
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: create venv
        run: |
          python3 -m venv venvconditional
          source venvconditional/bin/activate
      - name: use cache to install dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ hashFiles('requirements.txt') }}
      - name: build result
        run: |
          echo "app was built successfully"
          echo "weldone ${NAME}!"

  Deploy:
    needs: Build_App
    env:
      CLOUD: AWS
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: push code to EC2
        run: echo "you have successfully depoyed to $CLOUD"

  Report:
    runs-on: ubuntu-latest
    steps:
      - name: output job info
        run: |
          echo "something went wrong"
          echo "${{ toJSON(github) }}"


